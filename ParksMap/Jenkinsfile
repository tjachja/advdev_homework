// Jenkinsfile for ParksMap
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory

    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      git 'https://github.com/tjachja/advdev_homework.git'
    }

    echo "Copy nexus_settings.xml to current directoy"
    sh "cp ./nexus_settings.xml ParksMap/nexus_settings.xml"
    echo "Replace GUID string with current ${GUID}"
    sh "sed -i -- 's/GUID/${GUID}/g' ParksMap/nexus_settings.xml"

    echo "Change Folder to > ParksMap"
    dir ('ParksMap') {
      // Set the tag for the development image: version + build number
      def version = getVersionFromPom("pom.xml")
      def app = getArtifactIdFromPom("pom.xml")
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      def devNamespace = "${GUID}-parks-dev"
      def prodNamespace = "${GUID}-parks-prod"

      // Using Maven build the jar file
      // Do not run tests in this step
      stage('Build jar') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
      }
      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        sh "${mvnCmd} test"
      }

      stage('Code Analysis') {
        echo "Running Code Analysis"

        // Replace xyz-sonarqube with the name of your Sonarqube project
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.na39.openshift.opentlc.com/ -Dsonar.projectName=${app}-${devTag}"
      }

      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // Replace xyz-nexus with the name of your Nexus project
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.na39.openshift.opentlc.com/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image parksmap:${devTag}"

        // Start Binary Build in OpenShift using the file we just published
        // The filename is parksmap.jar in the 'target' directory of your current
        // Jenkins workspace
        // Replace xyz-tasks-dev with the name of your dev project
        sh "oc start-build parksmap --follow --from-file=./target/parksmap.jar -n ${devNamespace}"

        // Tag the image using the devTag
        openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: devNamespace, namespace: devNamespace, srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // Update the Image on the Development Deployment Config
        sh "oc set image dc/parksmap parksmap=docker-registry.default.svc:5000/${GUID}-parks-dev/parksmap:${devTag} -n ${GUID}-parks-dev"

        // Deploy the development application.

        openshiftDeploy depCfg: 'parksmap', namespace: devNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: 'parksmap', namespace: devNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: devNamespace, svcName: 'parksmap', verbose: 'false'
      }

      // Run Integration Tests in the Development Environment.
      stage('Integration Tests') {
        echo "Running Integration Tests"
        sleep 15

        echo "Getting ws health"
        sh "curl -i -H 'Content-Length: 0' -X POST http://parksmap-${GUID}-parks-dev.apps.na39.openshift.opentlc.com"
      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/parksmap:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/parksmap:${devTag}"

        // Tag the built image with the production tag.
        openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: prodNamespace, namespace: devNamespace, srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      // Do not activate the new version yet.
      def destApp   = "parksmap-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // Replace xyz-tasks-dev and xyz-tasks-prod with
        // your project names
        activeApp = sh(returnStdout: true, script: "oc get route parksmap -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()

        if (activeApp == "parksmap-green") {
          destApp = "parksmap-blue"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp

        // Update the Image on the Production Deployment Config
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-prod/parksmap:${prodTag} -n ${GUID}-parks-prod"

        // Deploy the inactive application.

        openshiftDeploy depCfg: destApp, namespace: prodNamespace, verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: destApp, namespace: prodNamespace, replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: prodNamespace, svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        sh 'oc patch route parksmap -n ' + prodNamespace + ' -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
