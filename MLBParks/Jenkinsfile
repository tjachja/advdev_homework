// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    final SONAR_URL = "http://sonarqube.${GUID}-sonarqube.svc:9000"
    final NEXUS_URL = "http://nexus3.${GUID}-nexus.svc:8081/repository/releases"

    final mvnCmd = "/opt/rh/rh-maven33/root/usr/bin/mvn -q -s nexus_settings.xml "

    final APP_HOME = "MLBParks"
    final APP_NAME = APP_HOME.toLowerCase()
    final ARTIFACT_FILENAME = "${APP_NAME}.war"
    final TYPE = "parksmap-backend"

    def version = "0.0"
    def devTag = "0.0-0"
    def prodTag = "0.0"

    def active = "green"
    def standby = "blue"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    stages {
        stage("Build-UT-Inspect") {
            steps {
                echo "GUID: ${GUID}"
                echo "CLUSTER: ${CLUSTER}"
                checkout scm
                dir(APP_HOME) {
                    sh "sed 's/GUID/${GUID}/' ../nexus_settings.xml > ./nexus_settings.xml"
                    sh """
                      ${mvnCmd} \
                          -Dmaven.test.failure.ignore=true \
                          -Dsonar.host.url=${SONAR_URL} \
                          clean test package \
                          sonar:sonar
                    """
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: "${APP_HOME}/target/surefire-reports/TEST-*.xml"
                }
            }
        }
        stage("Deploy to Dev") {
            steps {
                dir(APP_HOME) {
                    script {
                        version = getVersionFromPom("pom.xml")
                        devTag = "${version}-${env.BUILD_NUMBER}"
                        prodTag = "${version}"
                    }
                    sh "oc project ${GUID}-parks-dev"
                    sh "oc start-build ${APP_NAME} --from-file=target/${ARTIFACT_FILENAME} --follow"
                    sh "oc tag ${APP_NAME}:latest ${APP_NAME}:${devTag}"

                    sh "oc set image dc/${APP_NAME} ${APP_NAME}=docker-registry.default.svc:5000/${GUID}-parks-dev/${APP_NAME}:${devTag}"
                    sh "oc rollout latest dc/${APP_NAME} && oc rollout status dc/${APP_NAME} -w "
                }
            }
        }
        stage("IT") {
            when { expression { TYPE == "parksmap-backend" } }
            steps {
                sh "curl -s -o /dev/null -w '%{http_code}\n' ${APP_NAME}.${GUID}-parks-dev.svc:8080/ws/data/all | fgrep 200"
            }
            post {
                success {
                    echo "Deploy tested artifact to Nexus Maven Repository"
                    dir(APP_HOME) {
                        sh """
                          ${mvnCmd} -DaltDeploymentRepository=nexus::default::${NEXUS_URL} deploy 
                        """
                    }
                    echo "Push tested image to Nexus Docker Registry"
                    sh """
                      skopeo copy --src-tls-verify=false --src-creds=jenkins:\$(oc whoami -t) --dest-tls-verify=false --dest-creds=admin:admin123 \
                                  docker://docker-registry.default.svc:5000/${GUID}-parks-dev/${APP_NAME}:${devTag} \
                                  docker://nexus3-registry.${GUID}-nexus.svc:5000/${GUID}-parks-dev/${APP_NAME}:${devTag}
                    """
                }
            }
        }
        stage("Deploy to Prod (backend)") {
            when { expression { TYPE == "parksmap-backend" } }
            steps {
                sh "oc project ${GUID}-parks-prod"
                script {
                    def typeOfGreen = sh(script: "oc get svc/${APP_NAME}-green -o jsonpath='{ .metadata.labels.type }'", returnStdout: true).trim()
                    active = (typeOfGreen == TYPE) ? "green" : "blue"
                    standby = (active == "green") ? "blue" : "green"
                }
                echo "${active} is active. deploy ${APP_NAME}:${version} to ${standby}"
                sh "oc tag ${GUID}-parks-dev/${APP_NAME}:${devTag} ${GUID}-parks-prod/${APP_NAME}-${standby}:${prodTag}"
                sh "oc set image dc/${APP_NAME}-${standby} ${APP_NAME}-${standby}=docker-registry.default.svc:5000/${GUID}-parks-prod/${APP_NAME}-${standby}:${prodTag}"
                sh "oc rollout latest dc/${APP_NAME}-${standby} && oc rollout status dc/${APP_NAME}-${standby} -w "

                echo "switch from ${active} to ${standby}"
                sh "oc delete svc/${APP_NAME}-${standby} && oc expose dc/${APP_NAME}-${standby} --port=8080 -l type=${TYPE}"
                sh "oc delete svc/${APP_NAME}-${active} && oc expose dc/${APP_NAME}-${active} --port=8080 -l type=${TYPE}-standby"
            }
        }
        stage("Deploy to Prod (frontend)") {
            when { expression { TYPE == "parksmap-frontend" } }
            steps {
                sh "oc project ${GUID}-parks-prod"
                script {
                    active = sh(script: "oc get route parksmap -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'", returnStdout: true)
                               .trim().substring("parksmap-".size())
                    standby = (active == "green") ? "blue" : "green"
                }
                echo "${active} is active. deploy ${APP_NAME}:${version} to ${standby}"
                sh "oc tag ${GUID}-parks-dev/${APP_NAME}:${devTag} ${GUID}-parks-prod/${APP_NAME}-${standby}:${prodTag}"
                sh "oc set image dc/${APP_NAME}-${standby} ${APP_NAME}-${standby}=docker-registry.default.svc:5000/${GUID}-parks-prod/${APP_NAME}-${standby}:${prodTag}"
                sh "oc rollout latest dc/${APP_NAME}-${standby} && oc rollout status dc/${APP_NAME}-${standby} -w "

                echo "switch from ${active} to ${standby}"
                sh "oc patch route/${APP_NAME} -p '{\"spec\":{\"to\":{\"name\":\"${APP_NAME}-${standby}\"}}}'"
            }
        }
    }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
